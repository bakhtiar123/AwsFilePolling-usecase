<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="awsfilepolling_usecase-suite.xml" />
	<munit:test name="CreateObjectFlow-test" doc:id="734c7555-d120-487e-8cb9-565cddfe3e29" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Create File" doc:id="f5d2694c-f75a-4c60-8cf4-4aab8e3fd817" processor="s3:create-object">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="d0b2027d-1e33-4da0-8a8a-605ab6eaea84" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://CreateObjectFlowtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="8dfc84e2-5490-475f-add4-c7fdfbfe6419" >
				<munit:payload value="#[output application/json --- readUrl('classpath://CreateObjectFlowtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://CreateObjectFlowtest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to CreateObjectFlow" doc:id="79b11f4e-ade1-4f45-9fcf-58e3c5f18f6f" name="CreateObjectFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="4bd374ef-44a4-4bf3-819f-2b9e0bb46bfb" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import CreateObjectFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="CreateObjectFlow-Error" doc:id="52834449-ab29-4e07-a6e4-9c7ff7736a1c" >
		<munit:behavior >
			<munit:set-event doc:name="Set Input" doc:id="2386e5a6-bc43-487a-8310-d0429fbc8b19" >
				<munit:attributes value="#[readUrl('classpath://CreateObjectFlowtest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="f0cc9ad8-c38d-4031-8e42-570c1838df4f" >
				<flow-ref doc:name="Flow-ref to CreateObjectFlow" doc:id="8064e7cc-e695-4e29-82d0-b7a90f92039e" name="CreateObjectFlow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="2bda3b1a-bf28-4cf0-807d-a01320795c7e" >
						<logger level="INFO" doc:name="Logger" doc:id="031b6868-a279-4461-93a1-3e652071274e" message="Continue..."/>
					</on-error-continue>
				</error-handler>
			</try>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that" doc:id="c66bf705-8540-4c9f-ad39-a3f5b3b23d38" is="#[MunitTools::equalTo('Payload is empty')]" expression="#[payload.Message]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="ReadFileFlow-test" doc:id="f8967ef5-4dc9-4d3a-95be-58e5980cfcd8" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Read File" doc:id="3b1916bf-eb9f-46a2-96f5-241e3e604a39" processor="s3:get-object">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="6351237e-1770-43cd-a2ba-7ce6f0ad19d5" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/octet-stream --- readUrl('classpath://ReadFileFlowtest\mock_payload.dwl')]" mediaType="application/octet-stream" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://ReadFileFlowtest\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="47459bb0-4e3c-48ff-975b-c02ff4b15e33" >
				<munit:payload value="#[output application/octet-stream --- readUrl('classpath://ReadFileFlowtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/octet-stream" />
				<munit:attributes value="#[readUrl('classpath://ReadFileFlowtest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to ReadFileFlow" doc:id="3fe7bd20-13da-4ba7-b071-9fa05e1bbbe7" name="ReadFileFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b9c72099-9643-4597-9027-6670977c481e" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import ReadFileFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="ReadFileFlow-test-Error" doc:id="f0f717d4-6536-40fb-886e-e0d2a1b082ba" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Read File" doc:id="eda972b4-d93d-4522-9178-508307c0413d" processor="s3:get-object">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="6351237e-1770-43cd-a2ba-7ce6f0ad19d5" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/octet-stream --- readUrl('classpath://ReadFileFlowtest\mock_payload.dwl')]" mediaType="application/octet-stream" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://ReadFileFlowtest\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="ec6b182f-f515-4643-8977-1c8b1cb3eb3c" >
				<munit:payload value="#[output application/octet-stream --- readUrl('classpath://ReadFileFlowtest\set-event_payloadError.dwl')]" encoding="UTF-8" mediaType="application/octet-stream" />
				<munit:attributes value="#[readUrl('classpath://ReadFileFlowtest\set-event_attributes.dwl')]" />
			
</munit:set-event>
		</munit:behavior>
		<munit:execution>
			<try doc:name="Try" doc:id="7c8df69a-f2b7-46af-ba7d-fcfb8e3af238" >
				<flow-ref doc:name="Flow-ref to ReadFileFlow" doc:id="0979dcc7-392e-4497-8363-9c7537200f8b" name="ReadFileFlow" />
				<error-handler >
					<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="0527dc24-6377-476a-b456-f3cba7ba83db" >
						<logger level="INFO" doc:name="Logger" doc:id="e897351f-61be-4805-b120-db35bbe85aaa" message="ReadFile Continue ======================&gt;"/>
					</on-error-continue>
				</error-handler>
			</try>

		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that" doc:id="f8eab675-4870-462f-a77b-17e0ce4fb79c" is="#[MunitTools::equalTo('Invalid Bucket Name')]" expression="#[payload.Message]" />
		
</munit:validation>
	</munit:test>


</mule>
